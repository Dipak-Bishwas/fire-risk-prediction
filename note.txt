import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_error, r2_score
from sklearn.pipeline import Pipeline

# Load dataset
df = pd.read_csv('Algerian_forest_fires_cleaned_dataset.csv')

# Drop unnecessary columns
df.drop(['day', 'month', 'year'], axis=1, inplace=True)

# Encode 'Classes' as 0 and 1
df['Classes'] = np.where(df['Classes'].str.contains("not fire"), 0, 1)

# Independent and dependent features
X = df.drop('FWI', axis=1)
y = df['FWI']

X
	Temperature	RH	Ws	Rain	FFMC	DMC	DC	ISI	BUI	Classes	Region
0	29	57	18	0.0	65.7	3.4	7.6	1.3	3.4	0	0
1	29	61	13	1.3	64.4	4.1	7.6	1.0	3.9	0	0
2	26	82	22	13.1	47.1	2.5	7.1	0.3	2.7	0	0
3	25	89	13	2.5	28.6	1.3	6.9	0.0	1.7	0	0
4	27	77	16	0.0	64.8	3.0	14.2	1.2	3.9	0	0

y

0      0.5
1      0.4
2      0.1
3      0.0
4      0.5

# Split the dataset into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)

# Custom Transformer for Correlation Selection (corrected)
class CorrelationSelector(BaseEstimator, TransformerMixin):
    def __init__(self, threshold=0.85):
        self.threshold = threshold
        self.correlated_features = set()
    
    def fit(self, X, y=None):
        corr_matrix = X.corr()
        for i in range(len(corr_matrix.columns)):
            for j in range(i):
                if abs(corr_matrix.iloc[i, j]) > self.threshold:
                    colname = corr_matrix.columns[i]
                    self.correlated_features.add(colname)
        return self
    
    def transform(self, X):
        return X.drop(self.correlated_features, axis=1)

# Data Transformation Pipeline
data_transform_pipeline = Pipeline(steps=[
    ('correlation_selector', CorrelationSelector(threshold=0.85)),  # Drop correlated features
    ('scaler', StandardScaler())                                    # Scale the features
])

# Apply the data transformation pipeline to the training and test data
X_train_transformed = data_transform_pipeline.fit_transform(X_train)
X_test_transformed = data_transform_pipeline.transform(X_test)

# Model Training Pipeline
model_pipeline = Pipeline(steps=[
    ('model', LinearRegression())   # Train Linear Regression
])

# Fit the model training pipeline on the transformed data
model_pipeline.fit(X_train_transformed, y_train)

# Make predictions on the transformed test data
y_pred = model_pipeline.predict(X_test_transformed)

# Evaluate the model
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

# Output results
print(f"Mean Absolute Error: {mae}")
print(f"R2 Score: {r2}")



set PYTHONPATH=C:\ML project\Forest_Fire
python src/pipelines/training_pipeline.py

